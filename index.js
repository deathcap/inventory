// Generated by CoffeeScript 1.6.3
(function() {
  var Inventory, Item, ItemStack;

  Inventory = (function() {
    function Inventory(opts) {
      var size, _ref;
      opts = opts != null ? opts : {};
      size = (_ref = opts.size) != null ? _ref : 10;
      this.array = new Array(size);
    }

    Inventory.prototype.give = function(itemStack) {
      var excess, i, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.array;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if ((this.array[i] != null) && this.array[i].canStackWith(itemStack)) {
          excess = this.array[i].mergeStack(itemStack);
        }
      }
      _ref1 = this.array;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        if (this.array[i] == null) {
          this.array[i] = new ItemStack(itemStack.item, 0);
          excess = this.array[i].mergeStack(itemStack);
        }
      }
      return excess;
    };

    return Inventory;

  })();

  ItemStack = (function() {
    function ItemStack(item, count, tags) {
      this.item = item;
      this.count = count != null ? count : 1;
      this.tags = tags != null ? tags : {};
      this.maxStackSize = 64;
    }

    ItemStack.prototype.hasTags = function() {
      return Object.keys(this.tags).length !== 0;
    };

    ItemStack.prototype.canStackWith = function(itemStack) {
      if (itemStack.item !== this.item) {
        return false;
      }
      if (itemStack.hasTags() || this.hasTags()) {
        return false;
      }
      return true;
    };

    ItemStack.prototype.mergeStack = function(itemStack) {
      if (!this.canStackWith(itemStack)) {
        return false;
      }
      return itemStack.count = this.increase(itemStack.count);
    };

    ItemStack.prototype.increase = function(n) {
      var excessCount, newCount, _ref;
      _ref = this.tryAdding(n), newCount = _ref[0], excessCount = _ref[1];
      this.count = newCount;
      return excessCount;
    };

    ItemStack.prototype.tryAdding = function(n) {
      var sum;
      sum = this.count + n;
      if (sum > this.maxStackSize) {
        return [this.maxStackSize, sum - this.maxStackSize];
      } else {
        return [sum, 0];
      }
    };

    ItemStack.prototype.splitStack = function(n) {
      if (n > this.count) {
        return false;
      }
      this.count -= n;
      return new ItemStack(this.item, n, this.tags);
    };

    ItemStack.prototype.toString = function() {
      return "" + this.item + " x " + this.count + " " + (JSON.stringify(this.tags));
    };

    return ItemStack;

  })();

  Item = (function() {
    function Item(opts) {
      var k, v;
      for (k in opts) {
        v = opts[k];
        this[k] = v;
      }
    }

    return Item;

  })();

  module.exports.Inventory = Inventory;

  module.exports.ItemStack = ItemStack;

  module.exports.Item = Item;

}).call(this);
