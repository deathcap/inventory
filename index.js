// Generated by CoffeeScript 1.6.3
(function() {
  var Inventory, ItemPile, deepEqual;

  deepEqual = require('deep-equal');

  ItemPile = require('itempile');

  module.exports = Inventory = (function() {
    function Inventory(size, opts) {
      size = size != null ? size : 10;
      this.array = new Array(size);
    }

    Inventory.prototype.give = function(itemPile) {
      var excess, i, _i, _j, _ref, _ref1;
      excess = itemPile.count;
      for (i = _i = 0, _ref = this.array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if ((this.array[i] != null) && this.array[i].canPileWith(itemPile)) {
          excess = this.array[i].mergePile(itemPile);
        }
        if (itemPile.count === 0) {
          break;
        }
      }
      for (i = _j = 0, _ref1 = this.array.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        if (this.array[i] == null) {
          this.array[i] = new ItemPile(itemPile.item, 0);
          excess = this.array[i].mergePile(itemPile);
        }
        if (itemPile.count === 0) {
          break;
        }
      }
      return excess;
    };

    Inventory.prototype.take = function(itemPile) {
      var given, i, n, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if ((this.array[i] != null) && this.array[i].matchesTypeAndTags(itemPile)) {
          n = Math.min(itemPile.count, this.array[i].count);
          itemPile.count -= n;
          given = this.array[i].splitPile(n);
          if (this.array[i].count === 0) {
            _results.push(this.array[i] = void 0);
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Inventory.prototype.takeAt = function(position, count) {
      if (!this.array[position]) {
        return false;
      }
      return this.array[position].splitPile(count);
    };

    Inventory.prototype.toString = function() {
      var a, i, itemPile, _i, _len, _ref;
      a = [];
      _ref = this.array;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        itemPile = _ref[i];
        if (itemPile == null) {
          a.push('');
        } else {
          a.push("" + itemPile);
        }
      }
      return a.join('\t');
    };

    Inventory.fromString = function(s) {
      var items, ret, strings;
      strings = s.split('\t');
      items = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = strings.length; _i < _len; _i++) {
          s = strings[_i];
          _results.push(ItemPile.fromString(s));
        }
        return _results;
      })();
      ret = new Inventory(items.length);
      ret.array = items;
      return ret;
    };

    Inventory.prototype.size = function() {
      return this.array.length;
    };

    Inventory.prototype.slot = function(i) {
      return this.array[i];
    };

    return Inventory;

  })();

}).call(this);
